challenges
- validating a missing value
- mapping an inner property, i.e. providing a path to an embedded object's property.
- copying the data

- what needs to be passed to each validation
    - item to validate
        - original value
        - current value (after other validations have been applied). This is the value the validation is applied onto.
    - a data object. this object can provide:
        - a currated copy of the entire data set to validate. suitable for vino.
        - a path to the original value
        - a reference to the copy of the entire data
        - it can provide the value


# the DataObject 
- uses DataGraph object to map to values

# DataGraph
- a map simplified representation of the data made of dict and list objects:
    - each item points to either:
        - None when the attribute points to a primitive value
        - a dict when referring to an object
        - or a list when referring to an array
        - in turn each of the pointed to objects map to inner elements
        {'a': {'aa':None, 'bb': None, 'cc':{}}, 'b': [None,None,None,{}, [], None], 'c': None, 'd':None}: 
- outputs a branch to an element in the form of a DataPath

# DataPath
- a thin wrapper around a list that provides a means to map to various attributes of the data
- ['a', 'cc', 'cca', 0] would be dereferrenced using the DataGraph object as such

    def get(path):
        d = data
        for i in path:
            d = d[i]
        return d

- this object must provide a user-friendly way to express the path we're looking for
    dg = DataGraph({somedata})

    dp['a']['cc']['cca'][0]

# Attribute Alias
- a provides a mean to call any item by a different name simply by providing a DataPath
    DataGraph.alias(['a','cc','cca', 0], fnc) # use callbacks to internationalize
    DataGraph.alias(['a','cc','cca', 0], 'Some Other Name')
    DataGraph.alias(DataPath('a','cc','cca', range(0)), 'Some Other Name')



